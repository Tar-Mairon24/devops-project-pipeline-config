#!/usr/bin/env groovy

node {
    def branch
    stage('checkout') {
        checkout scm
        branch = env.BRANCH_NAME
        echo "Checking out branch: ${branch}"
        sh 'ls -la'
    }
    stage('parameters') {
        env.GIT_COMMIT = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
        env.GIT_COMMIT_MESSAGE = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
        env.GIT_AUTHOR_NAME = sh(script: "git log -1 --pretty=format:'%an'", returnStdout: true).trim()
        env.GIT_AUTHOR_EMAIL = sh(script: "git log -1 --pretty=format:'%ae'", returnStdout: true).trim()
        env.GIT_Version = sh(script: "git --version", returnStdout: true).trim()
        echo "Branch name: ${branch}"
        echo "Git commit: ${env.GIT_COMMIT}"
        echo "Git commit message: ${env.GIT_COMMIT_MESSAGE}"
        echo "Git author email: ${env.GIT_AUTHOR_EMAIL}"
        echo "Git author name: ${env.GIT_AUTHOR_NAME}"
        echo "Git version: ${env.GIT_Version}"
        echo "Workspace: ${env.WORKSPACE}"
        sh 'npm --version'
        sh 'node --version'
        sh 'docker --version'
        sh 'docker compose version'
    }
    stage('Build backend image') {
        echo 'Building docker image...'
        def imageVersion = env.Git_COMMIT.take(4)
        if (branch ==~ /(?i)^pr.*/) {
            dir('CN_api_bk') {
                sh 'ls -la'
                echo "Current directory: ${env.WORKSPACE}/CN_api_bk"
                echo "Building backend in directory: CN_api_bk"
                sh "docker build -t tarmairon24/backend:${imageVersion} ."
                sh "docker build -t tarmairon24/backend:latest ."
                echo "Docker image built with tag: backend:${imageVersion}"
            }
        }
    }
    stage('Push backend image') {
        echo 'Pushing docker image to registry...'
        def imageVersion = env.Git_COMMIT.take(4)
        if (branch ==~ /(?i)^pr.*/) {
            echo "Pushing Docker image for branch: ${branch}"
            try {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh "docker push tarmairon24/backend:${imageVersion}"
                    sh "docker push tarmairon24/backend:latest"
                    echo "Docker image pushed to registry with tag: backend:${imageVersion}"
                }
            } catch (hudson.AbortException e) {
                echo "Failed to push Docker image: ${e.getMessage()}"
                error "Docker push failed"
            }
        } else {
                echo "Skipping Docker push for branch: ${branch}"
        }
    }
    stage('Deploy backend develop') {
        if (branch == 'develop') {
            dockerDir = 'docker'
            dir(dockerDir) {
                sh 'ls -la'
                echo "Current directory: ${env.WORKSPACE}/${dockerDir}"
                echo "Building backend in directory: ${dockerDir}"
                sh 'docker compose -f backend.yml down'
                sh "docker compose -f backend.yml build"
                sh "docker compose -f backend.yml up -d"
                echo "Backend deployed successfully for branch: ${branch}"
            }
        } else {
                echo "Skipping backend deployment for branch: ${branch}"
        }
    }
    stage('Deploy backend main') {
        if (branch == 'main') {
            playbookDir = 'playbooks'
            dir(playbookDir) {
                sh 'ls -la'
                echo "Current directory: ${env.WORKSPACE}/${playbookDir}"
                echo "Running Ansible playbook for backend deployment"
                sh 'ansible-playbook backend.yml'
                echo "Backend deployed successfully for branch: ${branch}"
            }
        } else {
                echo "Skipping backend deployment for branch: ${branch}"
        }
    }
}
